### YamlMime:ManagedReference
items:
- uid: TeklaBillboardAid.RearDoor
  commentId: T:TeklaBillboardAid.RearDoor
  id: RearDoor
  parent: TeklaBillboardAid
  children:
  - TeklaBillboardAid.RearDoor.#ctor(TeklaBillboardAid.ModelParameters,System.Double,System.Double,System.Collections.Generic.List{Tekla.Structures.Model.Beam},System.Boolean,System.Boolean)
  - TeklaBillboardAid.RearDoor.RearDoorBuilder(System.Double,System.Double)
  langs:
  - csharp
  - vb
  name: RearDoor
  nameWithType: RearDoor
  fullName: TeklaBillboardAid.RearDoor
  type: Class
  source:
    remote:
      path: RearDoor.cs
      branch: Zeeshan
      repo: https://github.com/Zeeshan100103/Tekla_3D.git
    id: RearDoor
    path: RearDoor.cs
    startLine: 8
  assemblies:
  - BeamApplication
  namespace: TeklaBillboardAid
  syntax:
    content: public class RearDoor
    content.vb: Public Class RearDoor
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: TeklaBillboardAid.RearDoor.#ctor(TeklaBillboardAid.ModelParameters,System.Double,System.Double,System.Collections.Generic.List{Tekla.Structures.Model.Beam},System.Boolean,System.Boolean)
  commentId: M:TeklaBillboardAid.RearDoor.#ctor(TeklaBillboardAid.ModelParameters,System.Double,System.Double,System.Collections.Generic.List{Tekla.Structures.Model.Beam},System.Boolean,System.Boolean)
  id: '#ctor(TeklaBillboardAid.ModelParameters,System.Double,System.Double,System.Collections.Generic.List{Tekla.Structures.Model.Beam},System.Boolean,System.Boolean)'
  parent: TeklaBillboardAid.RearDoor
  langs:
  - csharp
  - vb
  name: RearDoor(ModelParameters, Double, Double, List<Beam>, Boolean, Boolean)
  nameWithType: RearDoor.RearDoor(ModelParameters, Double, Double, List<Beam>, Boolean, Boolean)
  fullName: TeklaBillboardAid.RearDoor.RearDoor(TeklaBillboardAid.ModelParameters, System.Double, System.Double, System.Collections.Generic.List<Tekla.Structures.Model.Beam>, System.Boolean, System.Boolean)
  type: Constructor
  source:
    remote:
      path: RearDoor.cs
      branch: Zeeshan
      repo: https://github.com/Zeeshan100103/Tekla_3D.git
    id: .ctor
    path: RearDoor.cs
    startLine: 30
  assemblies:
  - BeamApplication
  namespace: TeklaBillboardAid
  summary: "\nConstructor for RearDoor class.\n"
  example: []
  syntax:
    content: public RearDoor(ModelParameters modelparameters, double BoxZ, double DoorTopZ, List<Beam> BeamCutted, bool LeftFrameReplace, bool RightFrameReplace)
    parameters:
    - id: modelparameters
      type: TeklaBillboardAid.ModelParameters
      description: The model parameters.
    - id: BoxZ
      type: System.Double
      description: The Z-coordinate of the box.
    - id: DoorTopZ
      type: System.Double
      description: The Z-coordinate of the top of the door.
    - id: BeamCutted
      type: System.Collections.Generic.List{Tekla.Structures.Model.Beam}
      description: The list of cut beams.
    - id: LeftFrameReplace
      type: System.Boolean
      description: True if the left frame should be replaced.
    - id: RightFrameReplace
      type: System.Boolean
      description: True if the right frame should be replaced.
    content.vb: Public Sub New(modelparameters As ModelParameters, BoxZ As Double, DoorTopZ As Double, BeamCutted As List(Of Beam), LeftFrameReplace As Boolean, RightFrameReplace As Boolean)
  overload: TeklaBillboardAid.RearDoor.#ctor*
  nameWithType.vb: RearDoor.RearDoor(ModelParameters, Double, Double, List(Of Beam), Boolean, Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TeklaBillboardAid.RearDoor.RearDoor(TeklaBillboardAid.ModelParameters, System.Double, System.Double, System.Collections.Generic.List(Of Tekla.Structures.Model.Beam), System.Boolean, System.Boolean)
  name.vb: RearDoor(ModelParameters, Double, Double, List(Of Beam), Boolean, Boolean)
- uid: TeklaBillboardAid.RearDoor.RearDoorBuilder(System.Double,System.Double)
  commentId: M:TeklaBillboardAid.RearDoor.RearDoorBuilder(System.Double,System.Double)
  id: RearDoorBuilder(System.Double,System.Double)
  parent: TeklaBillboardAid.RearDoor
  langs:
  - csharp
  - vb
  name: RearDoorBuilder(Double, Double)
  nameWithType: RearDoor.RearDoorBuilder(Double, Double)
  fullName: TeklaBillboardAid.RearDoor.RearDoorBuilder(System.Double, System.Double)
  type: Method
  source:
    remote:
      path: RearDoor.cs
      branch: Zeeshan
      repo: https://github.com/Zeeshan100103/Tekla_3D.git
    id: RearDoorBuilder
    path: RearDoor.cs
    startLine: 48
  assemblies:
  - BeamApplication
  namespace: TeklaBillboardAid
  summary: "\nBuilds the rear door.\n"
  example: []
  syntax:
    content: public List<Part> RearDoorBuilder(double StartPointX, double EndPointX)
    parameters:
    - id: StartPointX
      type: System.Double
      description: The X-coordinate of the start point.
    - id: EndPointX
      type: System.Double
      description: The X-coordinate of the end point.
    return:
      type: System.Collections.Generic.List{Tekla.Structures.Model.Part}
      description: The list of parts composing the rear door.
    content.vb: Public Function RearDoorBuilder(StartPointX As Double, EndPointX As Double) As List(Of Part)
  overload: TeklaBillboardAid.RearDoor.RearDoorBuilder*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: TeklaBillboardAid
  commentId: N:TeklaBillboardAid
  name: TeklaBillboardAid
  nameWithType: TeklaBillboardAid
  fullName: TeklaBillboardAid
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: TeklaBillboardAid.RearDoor.#ctor*
  commentId: Overload:TeklaBillboardAid.RearDoor.#ctor
  name: RearDoor
  nameWithType: RearDoor.RearDoor
  fullName: TeklaBillboardAid.RearDoor.RearDoor
- uid: TeklaBillboardAid.ModelParameters
  commentId: T:TeklaBillboardAid.ModelParameters
  parent: TeklaBillboardAid
  name: ModelParameters
  nameWithType: ModelParameters
  fullName: TeklaBillboardAid.ModelParameters
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Collections.Generic.List{Tekla.Structures.Model.Beam}
  commentId: T:System.Collections.Generic.List{Tekla.Structures.Model.Beam}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Beam>
  nameWithType: List<Beam>
  fullName: System.Collections.Generic.List<Tekla.Structures.Model.Beam>
  nameWithType.vb: List(Of Beam)
  fullName.vb: System.Collections.Generic.List(Of Tekla.Structures.Model.Beam)
  name.vb: List(Of Beam)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Tekla.Structures.Model.Beam
    name: Beam
    nameWithType: Beam
    fullName: Tekla.Structures.Model.Beam
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Tekla.Structures.Model.Beam
    name: Beam
    nameWithType: Beam
    fullName: Tekla.Structures.Model.Beam
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: TeklaBillboardAid.RearDoor.RearDoorBuilder*
  commentId: Overload:TeklaBillboardAid.RearDoor.RearDoorBuilder
  name: RearDoorBuilder
  nameWithType: RearDoor.RearDoorBuilder
  fullName: TeklaBillboardAid.RearDoor.RearDoorBuilder
- uid: System.Collections.Generic.List{Tekla.Structures.Model.Part}
  commentId: T:System.Collections.Generic.List{Tekla.Structures.Model.Part}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Part>
  nameWithType: List<Part>
  fullName: System.Collections.Generic.List<Tekla.Structures.Model.Part>
  nameWithType.vb: List(Of Part)
  fullName.vb: System.Collections.Generic.List(Of Tekla.Structures.Model.Part)
  name.vb: List(Of Part)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Tekla.Structures.Model.Part
    name: Part
    nameWithType: Part
    fullName: Tekla.Structures.Model.Part
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Tekla.Structures.Model.Part
    name: Part
    nameWithType: Part
    fullName: Tekla.Structures.Model.Part
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
